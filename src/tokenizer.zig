const std = @import("std");

pub const Token = struct {
    tag: Tag,
    loc: Loc,

    pub const Loc = struct {
        start: usize,
        end: usize,
    };

    pub const Tag = enum {
        invalid,
        invalid_marker,
        eof,
        text,
        plus,
        minus,
        number,
        /// LINE AND FORMATTING Characters
        tilde,
        line_break,
        /// IDENTIFICATION  Markers
        marker_id,
        marker_usfm,
        marker_ide,
        marker_sts,
        marker_rem,
        marker_h,
        marker_hN,
        marker_tocN,
        marker_tocaN,
        /// INTRODUCTION Markers
        marker_imtN,
        marker_isN,
        marker_ip,
        marker_ipi,
        marker_im,
        marker_imi,
        marker_ipq,
        marker_imq,
        marker_ipr,
        marker_iqN,
        marker_ib,
        marker_iliN,
        marker_iot,
        marker_ioN,
        marker_ior,
        marker_ior_close,
        marker_iqt,
        marker_iqt_close,
        marker_iex,
        marker_imteN,
        marker_ie,
        /// TITLE, HEADING, LABEL Markers
        marker_mtN,
        marker_mteN,
        marker_msN,
        marker_mr,
        marker_sN,
        marker_sr,
        marker_r,
        /// also a cross-reference marker
        marker_rq,
        marker_rq_close,
        marker_d,
        marker_sp,
        marker_sdN,
        /// CHAPTER, VERSE Markers
        marker_c,
        marker_ca,
        marker_ca_close,
        marker_cl,
        marker_cp,
        marker_cd,
        marker_v,
        marker_va,
        marker_va_close,
        marker_vp,
        marker_vp_close,
        /// PARAGRAPH Markers
        marker_p,
        marker_m,
        marker_po,
        marker_pr,
        marker_cls,
        marker_pmo,
        marker_pm,
        marker_pmc,
        marker_pmr,
        marker_piN,
        marker_mi,
        marker_nb,
        marker_pc,
        marker_phN,
        /// also a poetry marker
        marker_b,
        /// POETRY Markers
        marker_qN,
        marker_qr,
        marker_qc,
        marker_qs,
        marker_qs_close,
        marker_qa,
        marker_qac,
        marker_qac_close,
        marker_qmN,
        marker_qd,
        /// LIST Markers
        marker_lh,
        marker_liN,
        marker_lf,
        marker_limN,
        marker_litl,
        marker_litl_close,
        marker_lik,
        marker_lik_close,
        marker_livN,
        marker_livN_close,
        /// TABLE Markers
        marker_tr,
        marker_thN,
        marker_thrN,
        marker_tcN,
        marker_tcrN,
        /// FOOTNOTE Markers
        marker_f,
        marker_f_close,
        marker_fe,
        marker_fe_close,
        marker_fr,
        marker_fq,
        marker_fqa,
        marker_fk,
        marker_fl,
        marker_fw,
        marker_fp,
        marker_fv,
        marker_fv_close,
        marker_ft,
        marker_fdc,
        marker_fdc_close,
        marker_fm,
        marker_fm_close,
        /// CROSS REFERENCE Markers
        marker_x,
        marker_x_close,
        marker_xo,
        marker_xk,
        marker_xq,
        marker_xt,
        marker_xta,
        marker_xop,
        marker_xop_close,
        marker_xot,
        marker_xot_close,
        marker_xnt,
        marker_xnt_close,
        marker_xdc,
        marker_xdc_close,
        /// SPECIAL TEXT Markers
        marker_add,
        marker_add_close,
        marker_bk,
        marker_bk_close,
        marker_dc,
        marker_dc_close,
        marker_k,
        marker_k_close,
        marker_lit,
        marker_nd,
        marker_nd_close,
        marker_ord,
        marker_ord_close,
        marker_pn,
        marker_pn_close,
        marker_png,
        marker_png_close,
        marker_addpn,
        marker_addpn_close,
        marker_qt,
        marker_qt_close,
        marker_sig,
        marker_sig_close,
        marker_sls,
        marker_sls_close,
        marker_tl,
        marker_tl_close,
        marker_wj,
        marker_wj_close,
        /// CHARACTER STYLING Markers
        marker_em,
        marker_em_close,
        marker_bd,
        marker_bd_close,
        marker_it,
        marker_it_close,
        marker_bdit,
        marker_bdit_close,
        marker_no,
        marker_no_close,
        marker_sc,
        marker_sc_close,
        marker_sup,
        marker_sup_close,
        /// PAGE BREAK Marker
        marker_page_break,
        /// SPECIAL FEATURE Markers
        marker_fig,
        marker_fig_close,
        marker_ndx,
        marker_ndx_close,
        marker_rb,
        marker_rb_close,
        marker_pro,
        marker_pro_close,
        marker_w,
        marker_w_close,
        marker_wg,
        marker_wg_close,
        marker_wh,
        marker_wh_close,
        marker_wa,
        marker_wa_close,
        /// LINK Markers
        marker_jmp,
        marker_jmp_close,
        /// MILESTONE Markers
        marker_qtN_s,
        marker_qtN_e,
        marker_ts_s,
        marker_ts_e,
        marker_close,
        /// EXTENDED FOOTNOTE Markers
        marker_ef,
        marker_ef_close,
        /// EXTENDED CROSS REFERENCE Markers
        marker_ex,
        marker_ex_close,
        /// SIDEBAR Markers
        marker_esb,
        marker_esbe,
        /// CONTENT CATEGORY Markers
        marker_cat,
        marker_cat_close,
        /// PERIPHERAL Marker
        marker_periph,
        /// Book Identifiers
        book_GEN,
        book_EXO,
        book_LEV,
        book_NUM,
        book_DEU,
        book_JOS,
        book_JDG,
        book_RUT,
        book_1SA,
        book_2SA,
        book_1KI,
        book_2KI,
        book_1CH,
        book_2CH,
        book_EZR,
        book_NEH,
        book_EST,
        book_JOB,
        book_PSA,
        book_PRO,
        book_ECC,
        book_SNG,
        book_ISA,
        book_JER,
        book_LAM,
        book_EZK,
        book_DAN,
        book_HOS,
        book_JOL,
        book_AMO,
        book_OBA,
        book_JON,
        book_MIC,
        book_NAM,
        book_HAB,
        book_ZEP,
        book_HAG,
        book_ZEC,
        book_MAL,
        book_MAT,
        book_MRK,
        book_LUK,
        book_JHN,
        book_ACT,
        book_ROM,
        book_1CO,
        book_2CO,
        book_GAL,
        book_EPH,
        book_PHP,
        book_COL,
        book_1TH,
        book_2TH,
        book_1TI,
        book_2TI,
        book_TIT,
        book_PHM,
        book_HEB,
        book_JAS,
        book_1PE,
        book_2PE,
        book_1JN,
        book_2JN,
        book_3JN,
        book_JUD,
        book_REV,
        book_TOB,
        book_JDT,
        book_ESG,
        book_WIS,
        book_SIR,
        book_BAR,
        book_LJE,
        book_S3Y,
        book_SUS,
        book_BEL,
        book_1MA,
        book_2MA,
        book_3MA,
        book_4MA,
        book_1ES,
        book_2ES,
        book_MAN,
        book_PS2,
        book_EZA,
        book_5EZ,
        book_6EZ,
        book_DAG,
        book_PS3,
        book_2BA,
        book_LBA,
        book_JUB,
        book_ENO,
        book_1MQ,
        book_2MQ,
        book_3MQ,
        book_REP,
        book_4BA,
        book_LAO,
        book_FRT,
        book_BAK,
        book_OTH,
        book_INT,
        book_CNC,
        book_GLO,
        book_TDX,
        book_NDX,
        book_XXA,
        book_XXB,
        book_XXC,
        book_XXD,
        book_XXE,
        book_XXF,
        book_XXG,
    };

    pub const book_identifiers = std.StaticStringMap(Tag).initComptime(.{
        .{ "GEN", .book_GEN },
        .{ "EXO", .book_EXO },
        .{ "LEV", .book_LEV },
        .{ "NUM", .book_NUM },
        .{ "DEU", .book_DEU },
        .{ "JOS", .book_JOS },
        .{ "JDG", .book_JDG },
        .{ "RUT", .book_RUT },
        .{ "1SA", .book_1SA },
        .{ "2SA", .book_2SA },
        .{ "1KI", .book_1KI },
        .{ "2KI", .book_2KI },
        .{ "1CH", .book_1CH },
        .{ "2CH", .book_2CH },
        .{ "EZR", .book_EZR },
        .{ "NEH", .book_NEH },
        .{ "EST", .book_EST },
        .{ "JOB", .book_JOB },
        .{ "PSA", .book_PSA },
        .{ "PRO", .book_PRO },
        .{ "ECC", .book_ECC },
        .{ "SNG", .book_SNG },
        .{ "ISA", .book_ISA },
        .{ "JER", .book_JER },
        .{ "LAM", .book_LAM },
        .{ "EZK", .book_EZK },
        .{ "DAN", .book_DAN },
        .{ "HOS", .book_HOS },
        .{ "JOL", .book_JOL },
        .{ "AMO", .book_AMO },
        .{ "OBA", .book_OBA },
        .{ "JON", .book_JON },
        .{ "MIC", .book_MIC },
        .{ "NAM", .book_NAM },
        .{ "HAB", .book_HAB },
        .{ "ZEP", .book_ZEP },
        .{ "HAG", .book_HAG },
        .{ "ZEC", .book_ZEC },
        .{ "MAL", .book_MAL },
        .{ "MAT", .book_MAT },
        .{ "MRK", .book_MRK },
        .{ "LUK", .book_LUK },
        .{ "JHN", .book_JHN },
        .{ "ACT", .book_ACT },
        .{ "ROM", .book_ROM },
        .{ "1CO", .book_1CO },
        .{ "2CO", .book_2CO },
        .{ "GAL", .book_GAL },
        .{ "EPH", .book_EPH },
        .{ "PHP", .book_PHP },
        .{ "COL", .book_COL },
        .{ "1TH", .book_1TH },
        .{ "2TH", .book_2TH },
        .{ "1TI", .book_1TI },
        .{ "2TI", .book_2TI },
        .{ "TIT", .book_TIT },
        .{ "PHM", .book_PHM },
        .{ "HEB", .book_HEB },
        .{ "JAS", .book_JAS },
        .{ "1PE", .book_1PE },
        .{ "2PE", .book_2PE },
        .{ "1JN", .book_1JN },
        .{ "2JN", .book_2JN },
        .{ "3JN", .book_3JN },
        .{ "JUD", .book_JUD },
        .{ "REV", .book_REV },
        .{ "TOB", .book_TOB },
        .{ "JDT", .book_JDT },
        .{ "ESG", .book_ESG },
        .{ "WIS", .book_WIS },
        .{ "SIR", .book_SIR },
        .{ "BAR", .book_BAR },
        .{ "LJE", .book_LJE },
        .{ "S3Y", .book_S3Y },
        .{ "SUS", .book_SUS },
        .{ "BEL", .book_BEL },
        .{ "1MA", .book_1MA },
        .{ "2MA", .book_2MA },
        .{ "3MA", .book_3MA },
        .{ "4MA", .book_4MA },
        .{ "1ES", .book_1ES },
        .{ "2ES", .book_2ES },
        .{ "MAN", .book_MAN },
        .{ "PS2", .book_PS2 },
        .{ "EZA", .book_EZA },
        .{ "5EZ", .book_5EZ },
        .{ "6EZ", .book_6EZ },
        .{ "DAG", .book_DAG },
        .{ "PS3", .book_PS3 },
        .{ "2BA", .book_2BA },
        .{ "LBA", .book_LBA },
        .{ "JUB", .book_JUB },
        .{ "ENO", .book_ENO },
        .{ "1MQ", .book_1MQ },
        .{ "2MQ", .book_2MQ },
        .{ "3MQ", .book_3MQ },
        .{ "REP", .book_REP },
        .{ "4BA", .book_4BA },
        .{ "LAO", .book_LAO },
        .{ "FRT", .book_FRT },
        .{ "BAK", .book_BAK },
        .{ "OTH", .book_OTH },
        .{ "INT", .book_INT },
        .{ "CNC", .book_CNC },
        .{ "GLO", .book_GLO },
        .{ "TDX", .book_TDX },
        .{ "NDX", .book_NDX },
        .{ "XXA", .book_XXA },
        .{ "XXB", .book_XXB },
        .{ "XXC", .book_XXC },
        .{ "XXD", .book_XXD },
        .{ "XXE", .book_XXE },
        .{ "XXF", .book_XXF },
        .{ "XXG", .book_XXG },
    });

    pub fn getBookIdentifier(bytes: []const u8) ?Tag {
        return book_identifiers.get(bytes);
    }
};

pub const Tokenizer = struct {
    buffer: [:0]const u8,
    index: usize,

    /// For debugging purposes.
    pub fn dump(self: *Tokenizer, token: *const Token) void {
        std.debug.print("{s} \"{s}\"\n", .{ @tagName(token.tag), self.buffer[token.loc.start..token.loc.end] });
    }

    pub fn init(buffer: [:0]const u8) Tokenizer {
        return .{
            .buffer = buffer,
            .index = 0,
        };
    }

    const State = enum {
        start,
        invalid,
        marker_start,
        forwardslash_found,
    };

    pub fn next(self: *Tokenizer) Token {
        const result: Token = .{
            .tag = undefined,
            .loc = .{
                .start = self.index,
                .end = undefined,
            },
        };
        state: switch (State.start) {
            .start => switch (self.buffer[self.index]) {
                0 => {
                    if (self.index == self.buffer.len) {
                        return .{
                            .tag = .eof,
                            .loc = .{
                                .start = self.index,
                                .end = self.index,
                            },
                        };
                    } else {
                        continue :state .invalid;
                    }
                },
                ' ', '\n', '\t', '\r' => {
                    self.index += 1;
                    result.loc.start = self.index;
                    continue :state .start;
                },
                '\\' => {
                    result.loc.start = self.index;
                    self.index += 1;
                    continue :state .marker_start;
                },
                '~' => {
                    result.tag = .tilde;
                    result.loc.start = self.index;
                    self.index += 1;
                    break :state;
                },
                '/' => continue :state .forwardslash_found,
                else => {
                    std.debug.print("Unknown value found: {c}\n", .{self.buffer[self.index]});
                },
            },
            .marker_start => {},
            .forwardslash_found => {
                self.index += 1;
                switch (self.buffer[self.index]) {
                    '/' => {
                        result.tag = .line_break;
                        self.index += 1;
                    },
                    else => {
                        self.index -= 1;
                        continue :state .invalid;
                    },
                }
            },
            .invalid => {},
        }
        result.loc.end = self.index;
        return result;
    }
};
